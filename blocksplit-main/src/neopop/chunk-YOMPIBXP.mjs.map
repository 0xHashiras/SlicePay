{"version":3,"sources":["../src/utils/index.ts"],"sourcesContent":["import { Platform, TextStyle, TransformsStyle } from 'react-native';\nimport { FontType, FontWeight } from '../components/Typography/types';\n\nexport const hexToRGBA = (hex: string, alpha: string | number) => {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n\n    return alpha ? `rgba(${r}, ${g}, ${b}, ${alpha})` : `rgb(${r}, ${g}, ${b})`;\n};\n\nexport const isEmpty = (value: any) =>\n    value == null ||\n    (typeof value === 'string' && value.trim() === '') ||\n    (Array.isArray(value) && value.length === 0) ||\n    (value?.constructor?.name === 'Object' && Object.keys(value).length === 0) ||\n    ((value?.constructor?.name === 'Map' || value?.constructor?.name === 'Set') &&\n        value.size === 0);\n\nexport const getTransform = (\n    transforms: (NonNullable<TransformsStyle['transform']>[0] | { translateZ: number })[],\n) =>\n    transforms.filter(\n        (transform) => !('translateZ' in transform) || Platform.OS === 'web',\n    ) as TransformsStyle['transform'];\n\nexport const generateTextStyle = (\n    fontType: FontType = 'body',\n    fontSize = 14,\n    fontWeight = FontWeight.REGULAR,\n    color = '#FFFFFF',\n): TextStyle => {\n    const LINE_HEIGHT_MULTIPLIER = {\n        heading: 1.25,\n        caps: 1.25,\n        body: 1.5,\n        'serif-heading': 1.25,\n    };\n\n    const getLetterSpacing = (fType: FontType, fSize: number, fWeight: FontWeight) => {\n        switch (fType) {\n            case 'heading':\n                switch (fWeight) {\n                    case FontWeight.EXTRA_BOLD:\n                        return fSize >= 44 ? 0 : 0.2;\n                    case FontWeight.BOLD:\n                        return fSize >= 13 ? 0.2 : 0.4;\n                    case FontWeight.SEMI_BOLD:\n                        return fSize >= 18 ? 0.2 : 0.4;\n                    default:\n                        return 0.2;\n                }\n            case 'caps':\n                return fSize > 8 ? 2 : 1;\n            case 'body':\n                return 0.4;\n            case 'serif-heading':\n                return 0.2;\n            default:\n                return 0.4;\n        }\n    };\n\n    const letterSpacing = getLetterSpacing(fontType, fontSize, fontWeight);\n\n    return {\n        color,\n        fontSize,\n        fontStyle: 'normal',\n        fontWeight,\n        letterSpacing,\n        lineHeight: Math.round(fontSize * LINE_HEIGHT_MULTIPLIER[fontType]),\n        ...(fontType === 'caps' && {\n            textTransform: 'uppercase',\n        }),\n    };\n};\n\nexport const isObject = (item: any) => item instanceof Object && !Array.isArray(item);\n\nexport const mergeDeep = (target: any, ...sources: any[]): any => {\n    if (sources.length === 0) {\n        return target;\n    }\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) {\n                    Object.assign(target, { [key]: {} });\n                }\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n};\n"],"mappings":";;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,IAAM,YAAY,CAAC,KAAa,UAA2B;AAC9D,QAAM,IAAI,SAAS,IAAI,MAAM,GAAG,CAAC,GAAG,EAAE;AACtC,QAAM,IAAI,SAAS,IAAI,MAAM,GAAG,CAAC,GAAG,EAAE;AACtC,QAAM,IAAI,SAAS,IAAI,MAAM,GAAG,CAAC,GAAG,EAAE;AAEtC,SAAO,QAAQ,QAAQ,MAAM,MAAM,MAAM,WAAW,OAAO,MAAM,MAAM;AAC3E;AAEO,IAAM,UAAU,CAAC,UAAY;AAXpC;AAYI,kBAAS,QACR,OAAO,UAAU,YAAY,MAAM,KAAK,MAAM,MAC9C,MAAM,QAAQ,KAAK,KAAK,MAAM,WAAW,KACzC,sCAAO,gBAAP,mBAAoB,UAAS,YAAY,OAAO,KAAK,KAAK,EAAE,WAAW,KACtE,uCAAO,gBAAP,mBAAoB,UAAS,SAAS,sCAAO,gBAAP,mBAAoB,UAAS,UACjE,MAAM,SAAS;AAAA;AAEhB,IAAM,eAAe,CACxB,eAEA,WAAW,OACP,CAAC,cAAc,CAAE,iBAAgB,cAAc,SAAS,OAAO,KACnE;AAEG,IAAM,oBAAoB,CAC7B,WAAqB,QACrB,WAAW,IACX,aAAa,qBACb,QAAQ,cACI;AACZ,QAAM,yBAAyB;AAAA,IAC3B,SAAS;AAAA,IACT,MAAM;AAAA,IACN,MAAM;AAAA,IACN,iBAAiB;AAAA,EACrB;AAEA,QAAM,mBAAmB,CAAC,OAAiB,OAAe,YAAwB;AAC9E,YAAQ;AAAA,WACC;AACD,gBAAQ;AAAA,eACC;AACD,mBAAO,SAAS,KAAK,IAAI;AAAA,eACxB;AACD,mBAAO,SAAS,KAAK,MAAM;AAAA,eAC1B;AACD,mBAAO,SAAS,KAAK,MAAM;AAAA;AAE3B,mBAAO;AAAA;AAAA,WAEd;AACD,eAAO,QAAQ,IAAI,IAAI;AAAA,WACtB;AACD,eAAO;AAAA,WACN;AACD,eAAO;AAAA;AAEP,eAAO;AAAA;AAAA,EAEnB;AAEA,QAAM,gBAAgB,iBAAiB,UAAU,UAAU,UAAU;AAErE,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA,YAAY,KAAK,MAAM,WAAW,uBAAuB,SAAS;AAAA,IAClE,GAAI,aAAa,UAAU;AAAA,MACvB,eAAe;AAAA,IACnB;AAAA,EACJ;AACJ;AAEO,IAAM,WAAW,CAAC,SAAc,gBAAgB,UAAU,CAAC,MAAM,QAAQ,IAAI;AAE7E,IAAM,YAAY,CAAC,WAAgB,YAAwB;AAC9D,MAAI,QAAQ,WAAW,GAAG;AACtB,WAAO;AAAA,EACX;AACA,QAAM,SAAS,QAAQ,MAAM;AAE7B,MAAI,SAAS,MAAM,KAAK,SAAS,MAAM,GAAG;AAEtC,eAAW,OAAO,QAAQ;AACtB,UAAI,SAAS,OAAO,IAAI,GAAG;AACvB,YAAI,CAAC,OAAO,MAAM;AACd,iBAAO,OAAO,QAAQ,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;AAAA,QACvC;AACA,kBAAU,OAAO,MAAM,OAAO,IAAI;AAAA,MACtC,OAAO;AACH,eAAO,OAAO,QAAQ,EAAE,CAAC,MAAM,OAAO,KAAK,CAAC;AAAA,MAChD;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO,UAAU,QAAQ,GAAG,OAAO;AACvC;","names":[]}